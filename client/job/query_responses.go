// Code generated by go-swagger; DO NOT EDIT.

package job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/flexlet/flexagent-client-go/models"
)

// QueryReader is a Reader for the Query structure.
type QueryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QueryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQueryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewQueryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewQueryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewQueryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewQueryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewQueryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewQueryOK creates a QueryOK with default headers values
func NewQueryOK() *QueryOK {
	return &QueryOK{}
}

/* QueryOK describes a response with status code 200, with default header values.

Query job succeeded
*/
type QueryOK struct {
	Payload *models.Job
}

func (o *QueryOK) Error() string {
	return fmt.Sprintf("[GET /jobs/{urn}][%d] queryOK  %+v", 200, o.Payload)
}
func (o *QueryOK) GetPayload() *models.Job {
	return o.Payload
}

func (o *QueryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Job)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryBadRequest creates a QueryBadRequest with default headers values
func NewQueryBadRequest() *QueryBadRequest {
	return &QueryBadRequest{}
}

/* QueryBadRequest describes a response with status code 400, with default header values.

QueryBadRequest query bad request
*/
type QueryBadRequest struct {
	Payload *QueryBadRequestBody
}

func (o *QueryBadRequest) Error() string {
	return fmt.Sprintf("[GET /jobs/{urn}][%d] queryBadRequest  %+v", 400, o.Payload)
}
func (o *QueryBadRequest) GetPayload() *QueryBadRequestBody {
	return o.Payload
}

func (o *QueryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(QueryBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryUnauthorized creates a QueryUnauthorized with default headers values
func NewQueryUnauthorized() *QueryUnauthorized {
	return &QueryUnauthorized{}
}

/* QueryUnauthorized describes a response with status code 401, with default header values.

QueryUnauthorized query unauthorized
*/
type QueryUnauthorized struct {
	Payload interface{}
}

func (o *QueryUnauthorized) Error() string {
	return fmt.Sprintf("[GET /jobs/{urn}][%d] queryUnauthorized  %+v", 401, o.Payload)
}
func (o *QueryUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *QueryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryForbidden creates a QueryForbidden with default headers values
func NewQueryForbidden() *QueryForbidden {
	return &QueryForbidden{}
}

/* QueryForbidden describes a response with status code 403, with default header values.

QueryForbidden query forbidden
*/
type QueryForbidden struct {
	Payload *QueryForbiddenBody
}

func (o *QueryForbidden) Error() string {
	return fmt.Sprintf("[GET /jobs/{urn}][%d] queryForbidden  %+v", 403, o.Payload)
}
func (o *QueryForbidden) GetPayload() *QueryForbiddenBody {
	return o.Payload
}

func (o *QueryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(QueryForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryNotFound creates a QueryNotFound with default headers values
func NewQueryNotFound() *QueryNotFound {
	return &QueryNotFound{}
}

/* QueryNotFound describes a response with status code 404, with default header values.

QueryNotFound query not found
*/
type QueryNotFound struct {
	Payload *QueryNotFoundBody
}

func (o *QueryNotFound) Error() string {
	return fmt.Sprintf("[GET /jobs/{urn}][%d] queryNotFound  %+v", 404, o.Payload)
}
func (o *QueryNotFound) GetPayload() *QueryNotFoundBody {
	return o.Payload
}

func (o *QueryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(QueryNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryInternalServerError creates a QueryInternalServerError with default headers values
func NewQueryInternalServerError() *QueryInternalServerError {
	return &QueryInternalServerError{}
}

/* QueryInternalServerError describes a response with status code 500, with default header values.

QueryInternalServerError query internal server error
*/
type QueryInternalServerError struct {
	Payload interface{}
}

func (o *QueryInternalServerError) Error() string {
	return fmt.Sprintf("[GET /jobs/{urn}][%d] queryInternalServerError  %+v", 500, o.Payload)
}
func (o *QueryInternalServerError) GetPayload() interface{} {
	return o.Payload
}

func (o *QueryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*QueryBadRequestBody query bad request body
swagger:model QueryBadRequestBody
*/
type QueryBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this query bad request body
func (o *QueryBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *QueryBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("queryBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this query bad request body based on context it is used
func (o *QueryBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *QueryBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *QueryBadRequestBody) UnmarshalBinary(b []byte) error {
	var res QueryBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*QueryForbiddenBody query forbidden body
swagger:model QueryForbiddenBody
*/
type QueryForbiddenBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this query forbidden body
func (o *QueryForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *QueryForbiddenBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("queryForbidden"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this query forbidden body based on context it is used
func (o *QueryForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *QueryForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *QueryForbiddenBody) UnmarshalBinary(b []byte) error {
	var res QueryForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*QueryNotFoundBody query not found body
swagger:model QueryNotFoundBody
*/
type QueryNotFoundBody struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this query not found body
func (o *QueryNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *QueryNotFoundBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("queryNotFound"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

func (o *QueryNotFoundBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("queryNotFound"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this query not found body based on context it is used
func (o *QueryNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *QueryNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *QueryNotFoundBody) UnmarshalBinary(b []byte) error {
	var res QueryNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
