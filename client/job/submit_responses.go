// Code generated by go-swagger; DO NOT EDIT.

package job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/flexlet/flexagent-client-go/models"
)

// SubmitReader is a Reader for the Submit structure.
type SubmitReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SubmitReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSubmitOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSubmitBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSubmitUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSubmitForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSubmitNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSubmitInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSubmitOK creates a SubmitOK with default headers values
func NewSubmitOK() *SubmitOK {
	return &SubmitOK{}
}

/* SubmitOK describes a response with status code 200, with default header values.

Submit job succeeded
*/
type SubmitOK struct {
	Payload []*models.Job
}

func (o *SubmitOK) Error() string {
	return fmt.Sprintf("[POST /jobs][%d] submitOK  %+v", 200, o.Payload)
}
func (o *SubmitOK) GetPayload() []*models.Job {
	return o.Payload
}

func (o *SubmitOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitBadRequest creates a SubmitBadRequest with default headers values
func NewSubmitBadRequest() *SubmitBadRequest {
	return &SubmitBadRequest{}
}

/* SubmitBadRequest describes a response with status code 400, with default header values.

SubmitBadRequest submit bad request
*/
type SubmitBadRequest struct {
	Payload *SubmitBadRequestBody
}

func (o *SubmitBadRequest) Error() string {
	return fmt.Sprintf("[POST /jobs][%d] submitBadRequest  %+v", 400, o.Payload)
}
func (o *SubmitBadRequest) GetPayload() *SubmitBadRequestBody {
	return o.Payload
}

func (o *SubmitBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SubmitBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitUnauthorized creates a SubmitUnauthorized with default headers values
func NewSubmitUnauthorized() *SubmitUnauthorized {
	return &SubmitUnauthorized{}
}

/* SubmitUnauthorized describes a response with status code 401, with default header values.

SubmitUnauthorized submit unauthorized
*/
type SubmitUnauthorized struct {
	Payload interface{}
}

func (o *SubmitUnauthorized) Error() string {
	return fmt.Sprintf("[POST /jobs][%d] submitUnauthorized  %+v", 401, o.Payload)
}
func (o *SubmitUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *SubmitUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitForbidden creates a SubmitForbidden with default headers values
func NewSubmitForbidden() *SubmitForbidden {
	return &SubmitForbidden{}
}

/* SubmitForbidden describes a response with status code 403, with default header values.

SubmitForbidden submit forbidden
*/
type SubmitForbidden struct {
	Payload *SubmitForbiddenBody
}

func (o *SubmitForbidden) Error() string {
	return fmt.Sprintf("[POST /jobs][%d] submitForbidden  %+v", 403, o.Payload)
}
func (o *SubmitForbidden) GetPayload() *SubmitForbiddenBody {
	return o.Payload
}

func (o *SubmitForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SubmitForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitNotFound creates a SubmitNotFound with default headers values
func NewSubmitNotFound() *SubmitNotFound {
	return &SubmitNotFound{}
}

/* SubmitNotFound describes a response with status code 404, with default header values.

SubmitNotFound submit not found
*/
type SubmitNotFound struct {
	Payload *SubmitNotFoundBody
}

func (o *SubmitNotFound) Error() string {
	return fmt.Sprintf("[POST /jobs][%d] submitNotFound  %+v", 404, o.Payload)
}
func (o *SubmitNotFound) GetPayload() *SubmitNotFoundBody {
	return o.Payload
}

func (o *SubmitNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SubmitNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitInternalServerError creates a SubmitInternalServerError with default headers values
func NewSubmitInternalServerError() *SubmitInternalServerError {
	return &SubmitInternalServerError{}
}

/* SubmitInternalServerError describes a response with status code 500, with default header values.

SubmitInternalServerError submit internal server error
*/
type SubmitInternalServerError struct {
	Payload interface{}
}

func (o *SubmitInternalServerError) Error() string {
	return fmt.Sprintf("[POST /jobs][%d] submitInternalServerError  %+v", 500, o.Payload)
}
func (o *SubmitInternalServerError) GetPayload() interface{} {
	return o.Payload
}

func (o *SubmitInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*SubmitBadRequestBody submit bad request body
swagger:model SubmitBadRequestBody
*/
type SubmitBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this submit bad request body
func (o *SubmitBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SubmitBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("submitBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this submit bad request body based on context it is used
func (o *SubmitBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SubmitBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SubmitBadRequestBody) UnmarshalBinary(b []byte) error {
	var res SubmitBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SubmitForbiddenBody submit forbidden body
swagger:model SubmitForbiddenBody
*/
type SubmitForbiddenBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this submit forbidden body
func (o *SubmitForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SubmitForbiddenBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("submitForbidden"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this submit forbidden body based on context it is used
func (o *SubmitForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SubmitForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SubmitForbiddenBody) UnmarshalBinary(b []byte) error {
	var res SubmitForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SubmitNotFoundBody submit not found body
swagger:model SubmitNotFoundBody
*/
type SubmitNotFoundBody struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this submit not found body
func (o *SubmitNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SubmitNotFoundBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("submitNotFound"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

func (o *SubmitNotFoundBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("submitNotFound"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this submit not found body based on context it is used
func (o *SubmitNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SubmitNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SubmitNotFoundBody) UnmarshalBinary(b []byte) error {
	var res SubmitNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
