// Code generated by go-swagger; DO NOT EDIT.

package crypto

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListVaultsReader is a Reader for the ListVaults structure.
type ListVaultsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListVaultsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListVaultsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListVaultsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListVaultsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListVaultsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListVaultsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListVaultsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListVaultsOK creates a ListVaultsOK with default headers values
func NewListVaultsOK() *ListVaultsOK {
	return &ListVaultsOK{}
}

/* ListVaultsOK describes a response with status code 200, with default header values.

Get vaults succeed
*/
type ListVaultsOK struct {
	Payload []string
}

func (o *ListVaultsOK) Error() string {
	return fmt.Sprintf("[GET /crypto/vaults][%d] listVaultsOK  %+v", 200, o.Payload)
}
func (o *ListVaultsOK) GetPayload() []string {
	return o.Payload
}

func (o *ListVaultsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListVaultsBadRequest creates a ListVaultsBadRequest with default headers values
func NewListVaultsBadRequest() *ListVaultsBadRequest {
	return &ListVaultsBadRequest{}
}

/* ListVaultsBadRequest describes a response with status code 400, with default header values.

ListVaultsBadRequest list vaults bad request
*/
type ListVaultsBadRequest struct {
	Payload *ListVaultsBadRequestBody
}

func (o *ListVaultsBadRequest) Error() string {
	return fmt.Sprintf("[GET /crypto/vaults][%d] listVaultsBadRequest  %+v", 400, o.Payload)
}
func (o *ListVaultsBadRequest) GetPayload() *ListVaultsBadRequestBody {
	return o.Payload
}

func (o *ListVaultsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListVaultsBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListVaultsUnauthorized creates a ListVaultsUnauthorized with default headers values
func NewListVaultsUnauthorized() *ListVaultsUnauthorized {
	return &ListVaultsUnauthorized{}
}

/* ListVaultsUnauthorized describes a response with status code 401, with default header values.

ListVaultsUnauthorized list vaults unauthorized
*/
type ListVaultsUnauthorized struct {
	Payload interface{}
}

func (o *ListVaultsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /crypto/vaults][%d] listVaultsUnauthorized  %+v", 401, o.Payload)
}
func (o *ListVaultsUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *ListVaultsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListVaultsForbidden creates a ListVaultsForbidden with default headers values
func NewListVaultsForbidden() *ListVaultsForbidden {
	return &ListVaultsForbidden{}
}

/* ListVaultsForbidden describes a response with status code 403, with default header values.

ListVaultsForbidden list vaults forbidden
*/
type ListVaultsForbidden struct {
	Payload *ListVaultsForbiddenBody
}

func (o *ListVaultsForbidden) Error() string {
	return fmt.Sprintf("[GET /crypto/vaults][%d] listVaultsForbidden  %+v", 403, o.Payload)
}
func (o *ListVaultsForbidden) GetPayload() *ListVaultsForbiddenBody {
	return o.Payload
}

func (o *ListVaultsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListVaultsForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListVaultsNotFound creates a ListVaultsNotFound with default headers values
func NewListVaultsNotFound() *ListVaultsNotFound {
	return &ListVaultsNotFound{}
}

/* ListVaultsNotFound describes a response with status code 404, with default header values.

ListVaultsNotFound list vaults not found
*/
type ListVaultsNotFound struct {
	Payload *ListVaultsNotFoundBody
}

func (o *ListVaultsNotFound) Error() string {
	return fmt.Sprintf("[GET /crypto/vaults][%d] listVaultsNotFound  %+v", 404, o.Payload)
}
func (o *ListVaultsNotFound) GetPayload() *ListVaultsNotFoundBody {
	return o.Payload
}

func (o *ListVaultsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListVaultsNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListVaultsInternalServerError creates a ListVaultsInternalServerError with default headers values
func NewListVaultsInternalServerError() *ListVaultsInternalServerError {
	return &ListVaultsInternalServerError{}
}

/* ListVaultsInternalServerError describes a response with status code 500, with default header values.

ListVaultsInternalServerError list vaults internal server error
*/
type ListVaultsInternalServerError struct {
	Payload interface{}
}

func (o *ListVaultsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /crypto/vaults][%d] listVaultsInternalServerError  %+v", 500, o.Payload)
}
func (o *ListVaultsInternalServerError) GetPayload() interface{} {
	return o.Payload
}

func (o *ListVaultsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ListVaultsBadRequestBody list vaults bad request body
swagger:model ListVaultsBadRequestBody
*/
type ListVaultsBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this list vaults bad request body
func (o *ListVaultsBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListVaultsBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("listVaultsBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list vaults bad request body based on context it is used
func (o *ListVaultsBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListVaultsBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListVaultsBadRequestBody) UnmarshalBinary(b []byte) error {
	var res ListVaultsBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListVaultsForbiddenBody list vaults forbidden body
swagger:model ListVaultsForbiddenBody
*/
type ListVaultsForbiddenBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this list vaults forbidden body
func (o *ListVaultsForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListVaultsForbiddenBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("listVaultsForbidden"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list vaults forbidden body based on context it is used
func (o *ListVaultsForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListVaultsForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListVaultsForbiddenBody) UnmarshalBinary(b []byte) error {
	var res ListVaultsForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListVaultsNotFoundBody list vaults not found body
swagger:model ListVaultsNotFoundBody
*/
type ListVaultsNotFoundBody struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this list vaults not found body
func (o *ListVaultsNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListVaultsNotFoundBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("listVaultsNotFound"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

func (o *ListVaultsNotFoundBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("listVaultsNotFound"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list vaults not found body based on context it is used
func (o *ListVaultsNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListVaultsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListVaultsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ListVaultsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
