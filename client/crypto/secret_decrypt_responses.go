// Code generated by go-swagger; DO NOT EDIT.

package crypto

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/flexlet/flexagent-client-go/models"
)

// SecretDecryptReader is a Reader for the SecretDecrypt structure.
type SecretDecryptReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SecretDecryptReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSecretDecryptOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSecretDecryptBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSecretDecryptUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSecretDecryptForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSecretDecryptNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSecretDecryptInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSecretDecryptOK creates a SecretDecryptOK with default headers values
func NewSecretDecryptOK() *SecretDecryptOK {
	return &SecretDecryptOK{}
}

/* SecretDecryptOK describes a response with status code 200, with default header values.

Secret decrypted
*/
type SecretDecryptOK struct {
	Payload *models.KubeSecret
}

func (o *SecretDecryptOK) Error() string {
	return fmt.Sprintf("[POST /crypto/secret/decrypt][%d] secretDecryptOK  %+v", 200, o.Payload)
}
func (o *SecretDecryptOK) GetPayload() *models.KubeSecret {
	return o.Payload
}

func (o *SecretDecryptOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.KubeSecret)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSecretDecryptBadRequest creates a SecretDecryptBadRequest with default headers values
func NewSecretDecryptBadRequest() *SecretDecryptBadRequest {
	return &SecretDecryptBadRequest{}
}

/* SecretDecryptBadRequest describes a response with status code 400, with default header values.

SecretDecryptBadRequest secret decrypt bad request
*/
type SecretDecryptBadRequest struct {
	Payload *SecretDecryptBadRequestBody
}

func (o *SecretDecryptBadRequest) Error() string {
	return fmt.Sprintf("[POST /crypto/secret/decrypt][%d] secretDecryptBadRequest  %+v", 400, o.Payload)
}
func (o *SecretDecryptBadRequest) GetPayload() *SecretDecryptBadRequestBody {
	return o.Payload
}

func (o *SecretDecryptBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SecretDecryptBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSecretDecryptUnauthorized creates a SecretDecryptUnauthorized with default headers values
func NewSecretDecryptUnauthorized() *SecretDecryptUnauthorized {
	return &SecretDecryptUnauthorized{}
}

/* SecretDecryptUnauthorized describes a response with status code 401, with default header values.

SecretDecryptUnauthorized secret decrypt unauthorized
*/
type SecretDecryptUnauthorized struct {
	Payload interface{}
}

func (o *SecretDecryptUnauthorized) Error() string {
	return fmt.Sprintf("[POST /crypto/secret/decrypt][%d] secretDecryptUnauthorized  %+v", 401, o.Payload)
}
func (o *SecretDecryptUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *SecretDecryptUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSecretDecryptForbidden creates a SecretDecryptForbidden with default headers values
func NewSecretDecryptForbidden() *SecretDecryptForbidden {
	return &SecretDecryptForbidden{}
}

/* SecretDecryptForbidden describes a response with status code 403, with default header values.

SecretDecryptForbidden secret decrypt forbidden
*/
type SecretDecryptForbidden struct {
	Payload *SecretDecryptForbiddenBody
}

func (o *SecretDecryptForbidden) Error() string {
	return fmt.Sprintf("[POST /crypto/secret/decrypt][%d] secretDecryptForbidden  %+v", 403, o.Payload)
}
func (o *SecretDecryptForbidden) GetPayload() *SecretDecryptForbiddenBody {
	return o.Payload
}

func (o *SecretDecryptForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SecretDecryptForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSecretDecryptNotFound creates a SecretDecryptNotFound with default headers values
func NewSecretDecryptNotFound() *SecretDecryptNotFound {
	return &SecretDecryptNotFound{}
}

/* SecretDecryptNotFound describes a response with status code 404, with default header values.

SecretDecryptNotFound secret decrypt not found
*/
type SecretDecryptNotFound struct {
	Payload *SecretDecryptNotFoundBody
}

func (o *SecretDecryptNotFound) Error() string {
	return fmt.Sprintf("[POST /crypto/secret/decrypt][%d] secretDecryptNotFound  %+v", 404, o.Payload)
}
func (o *SecretDecryptNotFound) GetPayload() *SecretDecryptNotFoundBody {
	return o.Payload
}

func (o *SecretDecryptNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SecretDecryptNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSecretDecryptInternalServerError creates a SecretDecryptInternalServerError with default headers values
func NewSecretDecryptInternalServerError() *SecretDecryptInternalServerError {
	return &SecretDecryptInternalServerError{}
}

/* SecretDecryptInternalServerError describes a response with status code 500, with default header values.

SecretDecryptInternalServerError secret decrypt internal server error
*/
type SecretDecryptInternalServerError struct {
	Payload interface{}
}

func (o *SecretDecryptInternalServerError) Error() string {
	return fmt.Sprintf("[POST /crypto/secret/decrypt][%d] secretDecryptInternalServerError  %+v", 500, o.Payload)
}
func (o *SecretDecryptInternalServerError) GetPayload() interface{} {
	return o.Payload
}

func (o *SecretDecryptInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*SecretDecryptBadRequestBody secret decrypt bad request body
swagger:model SecretDecryptBadRequestBody
*/
type SecretDecryptBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this secret decrypt bad request body
func (o *SecretDecryptBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SecretDecryptBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("secretDecryptBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this secret decrypt bad request body based on context it is used
func (o *SecretDecryptBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SecretDecryptBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SecretDecryptBadRequestBody) UnmarshalBinary(b []byte) error {
	var res SecretDecryptBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SecretDecryptForbiddenBody secret decrypt forbidden body
swagger:model SecretDecryptForbiddenBody
*/
type SecretDecryptForbiddenBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this secret decrypt forbidden body
func (o *SecretDecryptForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SecretDecryptForbiddenBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("secretDecryptForbidden"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this secret decrypt forbidden body based on context it is used
func (o *SecretDecryptForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SecretDecryptForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SecretDecryptForbiddenBody) UnmarshalBinary(b []byte) error {
	var res SecretDecryptForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SecretDecryptNotFoundBody secret decrypt not found body
swagger:model SecretDecryptNotFoundBody
*/
type SecretDecryptNotFoundBody struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this secret decrypt not found body
func (o *SecretDecryptNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SecretDecryptNotFoundBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("secretDecryptNotFound"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

func (o *SecretDecryptNotFoundBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("secretDecryptNotFound"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this secret decrypt not found body based on context it is used
func (o *SecretDecryptNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SecretDecryptNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SecretDecryptNotFoundBody) UnmarshalBinary(b []byte) error {
	var res SecretDecryptNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
