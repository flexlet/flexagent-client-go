// Code generated by go-swagger; DO NOT EDIT.

package crypto

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/flexlet/flexagent-client-go/models"
)

// EncryptReader is a Reader for the Encrypt structure.
type EncryptReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EncryptReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEncryptOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEncryptBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewEncryptUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEncryptForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEncryptNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEncryptInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewEncryptOK creates a EncryptOK with default headers values
func NewEncryptOK() *EncryptOK {
	return &EncryptOK{}
}

/* EncryptOK describes a response with status code 200, with default header values.

Data encrypted
*/
type EncryptOK struct {
	Payload *models.CryptoData
}

func (o *EncryptOK) Error() string {
	return fmt.Sprintf("[POST /crypto/encrypt][%d] encryptOK  %+v", 200, o.Payload)
}
func (o *EncryptOK) GetPayload() *models.CryptoData {
	return o.Payload
}

func (o *EncryptOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CryptoData)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEncryptBadRequest creates a EncryptBadRequest with default headers values
func NewEncryptBadRequest() *EncryptBadRequest {
	return &EncryptBadRequest{}
}

/* EncryptBadRequest describes a response with status code 400, with default header values.

EncryptBadRequest encrypt bad request
*/
type EncryptBadRequest struct {
	Payload *EncryptBadRequestBody
}

func (o *EncryptBadRequest) Error() string {
	return fmt.Sprintf("[POST /crypto/encrypt][%d] encryptBadRequest  %+v", 400, o.Payload)
}
func (o *EncryptBadRequest) GetPayload() *EncryptBadRequestBody {
	return o.Payload
}

func (o *EncryptBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(EncryptBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEncryptUnauthorized creates a EncryptUnauthorized with default headers values
func NewEncryptUnauthorized() *EncryptUnauthorized {
	return &EncryptUnauthorized{}
}

/* EncryptUnauthorized describes a response with status code 401, with default header values.

EncryptUnauthorized encrypt unauthorized
*/
type EncryptUnauthorized struct {
	Payload interface{}
}

func (o *EncryptUnauthorized) Error() string {
	return fmt.Sprintf("[POST /crypto/encrypt][%d] encryptUnauthorized  %+v", 401, o.Payload)
}
func (o *EncryptUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *EncryptUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEncryptForbidden creates a EncryptForbidden with default headers values
func NewEncryptForbidden() *EncryptForbidden {
	return &EncryptForbidden{}
}

/* EncryptForbidden describes a response with status code 403, with default header values.

EncryptForbidden encrypt forbidden
*/
type EncryptForbidden struct {
	Payload *EncryptForbiddenBody
}

func (o *EncryptForbidden) Error() string {
	return fmt.Sprintf("[POST /crypto/encrypt][%d] encryptForbidden  %+v", 403, o.Payload)
}
func (o *EncryptForbidden) GetPayload() *EncryptForbiddenBody {
	return o.Payload
}

func (o *EncryptForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(EncryptForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEncryptNotFound creates a EncryptNotFound with default headers values
func NewEncryptNotFound() *EncryptNotFound {
	return &EncryptNotFound{}
}

/* EncryptNotFound describes a response with status code 404, with default header values.

EncryptNotFound encrypt not found
*/
type EncryptNotFound struct {
	Payload *EncryptNotFoundBody
}

func (o *EncryptNotFound) Error() string {
	return fmt.Sprintf("[POST /crypto/encrypt][%d] encryptNotFound  %+v", 404, o.Payload)
}
func (o *EncryptNotFound) GetPayload() *EncryptNotFoundBody {
	return o.Payload
}

func (o *EncryptNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(EncryptNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEncryptInternalServerError creates a EncryptInternalServerError with default headers values
func NewEncryptInternalServerError() *EncryptInternalServerError {
	return &EncryptInternalServerError{}
}

/* EncryptInternalServerError describes a response with status code 500, with default header values.

EncryptInternalServerError encrypt internal server error
*/
type EncryptInternalServerError struct {
	Payload interface{}
}

func (o *EncryptInternalServerError) Error() string {
	return fmt.Sprintf("[POST /crypto/encrypt][%d] encryptInternalServerError  %+v", 500, o.Payload)
}
func (o *EncryptInternalServerError) GetPayload() interface{} {
	return o.Payload
}

func (o *EncryptInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*EncryptBadRequestBody encrypt bad request body
swagger:model EncryptBadRequestBody
*/
type EncryptBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this encrypt bad request body
func (o *EncryptBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *EncryptBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("encryptBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this encrypt bad request body based on context it is used
func (o *EncryptBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *EncryptBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EncryptBadRequestBody) UnmarshalBinary(b []byte) error {
	var res EncryptBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*EncryptForbiddenBody encrypt forbidden body
swagger:model EncryptForbiddenBody
*/
type EncryptForbiddenBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this encrypt forbidden body
func (o *EncryptForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *EncryptForbiddenBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("encryptForbidden"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this encrypt forbidden body based on context it is used
func (o *EncryptForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *EncryptForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EncryptForbiddenBody) UnmarshalBinary(b []byte) error {
	var res EncryptForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*EncryptNotFoundBody encrypt not found body
swagger:model EncryptNotFoundBody
*/
type EncryptNotFoundBody struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this encrypt not found body
func (o *EncryptNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *EncryptNotFoundBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("encryptNotFound"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

func (o *EncryptNotFoundBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("encryptNotFound"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this encrypt not found body based on context it is used
func (o *EncryptNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *EncryptNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EncryptNotFoundBody) UnmarshalBinary(b []byte) error {
	var res EncryptNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
