// Code generated by go-swagger; DO NOT EDIT.

package crypto

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/flexlet/flexagent-client-go/models"
)

// SecretEncryptReader is a Reader for the SecretEncrypt structure.
type SecretEncryptReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SecretEncryptReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSecretEncryptOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSecretEncryptBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSecretEncryptUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSecretEncryptForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSecretEncryptNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSecretEncryptInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSecretEncryptOK creates a SecretEncryptOK with default headers values
func NewSecretEncryptOK() *SecretEncryptOK {
	return &SecretEncryptOK{}
}

/* SecretEncryptOK describes a response with status code 200, with default header values.

Secret encrypted
*/
type SecretEncryptOK struct {
	Payload *models.KubeSecret
}

func (o *SecretEncryptOK) Error() string {
	return fmt.Sprintf("[POST /crypto/secret/encrypt][%d] secretEncryptOK  %+v", 200, o.Payload)
}
func (o *SecretEncryptOK) GetPayload() *models.KubeSecret {
	return o.Payload
}

func (o *SecretEncryptOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.KubeSecret)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSecretEncryptBadRequest creates a SecretEncryptBadRequest with default headers values
func NewSecretEncryptBadRequest() *SecretEncryptBadRequest {
	return &SecretEncryptBadRequest{}
}

/* SecretEncryptBadRequest describes a response with status code 400, with default header values.

SecretEncryptBadRequest secret encrypt bad request
*/
type SecretEncryptBadRequest struct {
	Payload *SecretEncryptBadRequestBody
}

func (o *SecretEncryptBadRequest) Error() string {
	return fmt.Sprintf("[POST /crypto/secret/encrypt][%d] secretEncryptBadRequest  %+v", 400, o.Payload)
}
func (o *SecretEncryptBadRequest) GetPayload() *SecretEncryptBadRequestBody {
	return o.Payload
}

func (o *SecretEncryptBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SecretEncryptBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSecretEncryptUnauthorized creates a SecretEncryptUnauthorized with default headers values
func NewSecretEncryptUnauthorized() *SecretEncryptUnauthorized {
	return &SecretEncryptUnauthorized{}
}

/* SecretEncryptUnauthorized describes a response with status code 401, with default header values.

SecretEncryptUnauthorized secret encrypt unauthorized
*/
type SecretEncryptUnauthorized struct {
	Payload interface{}
}

func (o *SecretEncryptUnauthorized) Error() string {
	return fmt.Sprintf("[POST /crypto/secret/encrypt][%d] secretEncryptUnauthorized  %+v", 401, o.Payload)
}
func (o *SecretEncryptUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *SecretEncryptUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSecretEncryptForbidden creates a SecretEncryptForbidden with default headers values
func NewSecretEncryptForbidden() *SecretEncryptForbidden {
	return &SecretEncryptForbidden{}
}

/* SecretEncryptForbidden describes a response with status code 403, with default header values.

SecretEncryptForbidden secret encrypt forbidden
*/
type SecretEncryptForbidden struct {
	Payload *SecretEncryptForbiddenBody
}

func (o *SecretEncryptForbidden) Error() string {
	return fmt.Sprintf("[POST /crypto/secret/encrypt][%d] secretEncryptForbidden  %+v", 403, o.Payload)
}
func (o *SecretEncryptForbidden) GetPayload() *SecretEncryptForbiddenBody {
	return o.Payload
}

func (o *SecretEncryptForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SecretEncryptForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSecretEncryptNotFound creates a SecretEncryptNotFound with default headers values
func NewSecretEncryptNotFound() *SecretEncryptNotFound {
	return &SecretEncryptNotFound{}
}

/* SecretEncryptNotFound describes a response with status code 404, with default header values.

SecretEncryptNotFound secret encrypt not found
*/
type SecretEncryptNotFound struct {
	Payload *SecretEncryptNotFoundBody
}

func (o *SecretEncryptNotFound) Error() string {
	return fmt.Sprintf("[POST /crypto/secret/encrypt][%d] secretEncryptNotFound  %+v", 404, o.Payload)
}
func (o *SecretEncryptNotFound) GetPayload() *SecretEncryptNotFoundBody {
	return o.Payload
}

func (o *SecretEncryptNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SecretEncryptNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSecretEncryptInternalServerError creates a SecretEncryptInternalServerError with default headers values
func NewSecretEncryptInternalServerError() *SecretEncryptInternalServerError {
	return &SecretEncryptInternalServerError{}
}

/* SecretEncryptInternalServerError describes a response with status code 500, with default header values.

SecretEncryptInternalServerError secret encrypt internal server error
*/
type SecretEncryptInternalServerError struct {
	Payload interface{}
}

func (o *SecretEncryptInternalServerError) Error() string {
	return fmt.Sprintf("[POST /crypto/secret/encrypt][%d] secretEncryptInternalServerError  %+v", 500, o.Payload)
}
func (o *SecretEncryptInternalServerError) GetPayload() interface{} {
	return o.Payload
}

func (o *SecretEncryptInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*SecretEncryptBadRequestBody secret encrypt bad request body
swagger:model SecretEncryptBadRequestBody
*/
type SecretEncryptBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this secret encrypt bad request body
func (o *SecretEncryptBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SecretEncryptBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("secretEncryptBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this secret encrypt bad request body based on context it is used
func (o *SecretEncryptBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SecretEncryptBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SecretEncryptBadRequestBody) UnmarshalBinary(b []byte) error {
	var res SecretEncryptBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SecretEncryptForbiddenBody secret encrypt forbidden body
swagger:model SecretEncryptForbiddenBody
*/
type SecretEncryptForbiddenBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this secret encrypt forbidden body
func (o *SecretEncryptForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SecretEncryptForbiddenBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("secretEncryptForbidden"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this secret encrypt forbidden body based on context it is used
func (o *SecretEncryptForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SecretEncryptForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SecretEncryptForbiddenBody) UnmarshalBinary(b []byte) error {
	var res SecretEncryptForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SecretEncryptNotFoundBody secret encrypt not found body
swagger:model SecretEncryptNotFoundBody
*/
type SecretEncryptNotFoundBody struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this secret encrypt not found body
func (o *SecretEncryptNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SecretEncryptNotFoundBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("secretEncryptNotFound"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

func (o *SecretEncryptNotFoundBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("secretEncryptNotFound"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this secret encrypt not found body based on context it is used
func (o *SecretEncryptNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SecretEncryptNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SecretEncryptNotFoundBody) UnmarshalBinary(b []byte) error {
	var res SecretEncryptNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
