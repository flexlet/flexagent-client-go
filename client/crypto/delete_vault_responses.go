// Code generated by go-swagger; DO NOT EDIT.

package crypto

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeleteVaultReader is a Reader for the DeleteVault structure.
type DeleteVaultReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteVaultReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteVaultOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteVaultBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteVaultUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteVaultForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteVaultNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteVaultInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteVaultOK creates a DeleteVaultOK with default headers values
func NewDeleteVaultOK() *DeleteVaultOK {
	return &DeleteVaultOK{}
}

/* DeleteVaultOK describes a response with status code 200, with default header values.

Delete vault succeed
*/
type DeleteVaultOK struct {
	Payload string
}

func (o *DeleteVaultOK) Error() string {
	return fmt.Sprintf("[DELETE /crypto/vault/{name}][%d] deleteVaultOK  %+v", 200, o.Payload)
}
func (o *DeleteVaultOK) GetPayload() string {
	return o.Payload
}

func (o *DeleteVaultOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteVaultBadRequest creates a DeleteVaultBadRequest with default headers values
func NewDeleteVaultBadRequest() *DeleteVaultBadRequest {
	return &DeleteVaultBadRequest{}
}

/* DeleteVaultBadRequest describes a response with status code 400, with default header values.

DeleteVaultBadRequest delete vault bad request
*/
type DeleteVaultBadRequest struct {
	Payload *DeleteVaultBadRequestBody
}

func (o *DeleteVaultBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /crypto/vault/{name}][%d] deleteVaultBadRequest  %+v", 400, o.Payload)
}
func (o *DeleteVaultBadRequest) GetPayload() *DeleteVaultBadRequestBody {
	return o.Payload
}

func (o *DeleteVaultBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteVaultBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteVaultUnauthorized creates a DeleteVaultUnauthorized with default headers values
func NewDeleteVaultUnauthorized() *DeleteVaultUnauthorized {
	return &DeleteVaultUnauthorized{}
}

/* DeleteVaultUnauthorized describes a response with status code 401, with default header values.

DeleteVaultUnauthorized delete vault unauthorized
*/
type DeleteVaultUnauthorized struct {
	Payload interface{}
}

func (o *DeleteVaultUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /crypto/vault/{name}][%d] deleteVaultUnauthorized  %+v", 401, o.Payload)
}
func (o *DeleteVaultUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *DeleteVaultUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteVaultForbidden creates a DeleteVaultForbidden with default headers values
func NewDeleteVaultForbidden() *DeleteVaultForbidden {
	return &DeleteVaultForbidden{}
}

/* DeleteVaultForbidden describes a response with status code 403, with default header values.

DeleteVaultForbidden delete vault forbidden
*/
type DeleteVaultForbidden struct {
	Payload *DeleteVaultForbiddenBody
}

func (o *DeleteVaultForbidden) Error() string {
	return fmt.Sprintf("[DELETE /crypto/vault/{name}][%d] deleteVaultForbidden  %+v", 403, o.Payload)
}
func (o *DeleteVaultForbidden) GetPayload() *DeleteVaultForbiddenBody {
	return o.Payload
}

func (o *DeleteVaultForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteVaultForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteVaultNotFound creates a DeleteVaultNotFound with default headers values
func NewDeleteVaultNotFound() *DeleteVaultNotFound {
	return &DeleteVaultNotFound{}
}

/* DeleteVaultNotFound describes a response with status code 404, with default header values.

DeleteVaultNotFound delete vault not found
*/
type DeleteVaultNotFound struct {
	Payload *DeleteVaultNotFoundBody
}

func (o *DeleteVaultNotFound) Error() string {
	return fmt.Sprintf("[DELETE /crypto/vault/{name}][%d] deleteVaultNotFound  %+v", 404, o.Payload)
}
func (o *DeleteVaultNotFound) GetPayload() *DeleteVaultNotFoundBody {
	return o.Payload
}

func (o *DeleteVaultNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteVaultNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteVaultInternalServerError creates a DeleteVaultInternalServerError with default headers values
func NewDeleteVaultInternalServerError() *DeleteVaultInternalServerError {
	return &DeleteVaultInternalServerError{}
}

/* DeleteVaultInternalServerError describes a response with status code 500, with default header values.

DeleteVaultInternalServerError delete vault internal server error
*/
type DeleteVaultInternalServerError struct {
	Payload interface{}
}

func (o *DeleteVaultInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /crypto/vault/{name}][%d] deleteVaultInternalServerError  %+v", 500, o.Payload)
}
func (o *DeleteVaultInternalServerError) GetPayload() interface{} {
	return o.Payload
}

func (o *DeleteVaultInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*DeleteVaultBadRequestBody delete vault bad request body
swagger:model DeleteVaultBadRequestBody
*/
type DeleteVaultBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this delete vault bad request body
func (o *DeleteVaultBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteVaultBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("deleteVaultBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this delete vault bad request body based on context it is used
func (o *DeleteVaultBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteVaultBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteVaultBadRequestBody) UnmarshalBinary(b []byte) error {
	var res DeleteVaultBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteVaultForbiddenBody delete vault forbidden body
swagger:model DeleteVaultForbiddenBody
*/
type DeleteVaultForbiddenBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this delete vault forbidden body
func (o *DeleteVaultForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteVaultForbiddenBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("deleteVaultForbidden"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this delete vault forbidden body based on context it is used
func (o *DeleteVaultForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteVaultForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteVaultForbiddenBody) UnmarshalBinary(b []byte) error {
	var res DeleteVaultForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteVaultNotFoundBody delete vault not found body
swagger:model DeleteVaultNotFoundBody
*/
type DeleteVaultNotFoundBody struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this delete vault not found body
func (o *DeleteVaultNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteVaultNotFoundBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("deleteVaultNotFound"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

func (o *DeleteVaultNotFoundBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("deleteVaultNotFound"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this delete vault not found body based on context it is used
func (o *DeleteVaultNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteVaultNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteVaultNotFoundBody) UnmarshalBinary(b []byte) error {
	var res DeleteVaultNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
