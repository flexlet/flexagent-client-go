// Code generated by go-swagger; DO NOT EDIT.

package cronjob

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeleteCronJobReader is a Reader for the DeleteCronJob structure.
type DeleteCronJobReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteCronJobReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteCronJobOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteCronJobBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteCronJobUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteCronJobForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteCronJobNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteCronJobInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteCronJobOK creates a DeleteCronJobOK with default headers values
func NewDeleteCronJobOK() *DeleteCronJobOK {
	return &DeleteCronJobOK{}
}

/* DeleteCronJobOK describes a response with status code 200, with default header values.

Delete cronjob succeeded
*/
type DeleteCronJobOK struct {
	Payload string
}

func (o *DeleteCronJobOK) Error() string {
	return fmt.Sprintf("[DELETE /cronjobs/{id}][%d] deleteCronJobOK  %+v", 200, o.Payload)
}
func (o *DeleteCronJobOK) GetPayload() string {
	return o.Payload
}

func (o *DeleteCronJobOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCronJobBadRequest creates a DeleteCronJobBadRequest with default headers values
func NewDeleteCronJobBadRequest() *DeleteCronJobBadRequest {
	return &DeleteCronJobBadRequest{}
}

/* DeleteCronJobBadRequest describes a response with status code 400, with default header values.

DeleteCronJobBadRequest delete cron job bad request
*/
type DeleteCronJobBadRequest struct {
	Payload *DeleteCronJobBadRequestBody
}

func (o *DeleteCronJobBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /cronjobs/{id}][%d] deleteCronJobBadRequest  %+v", 400, o.Payload)
}
func (o *DeleteCronJobBadRequest) GetPayload() *DeleteCronJobBadRequestBody {
	return o.Payload
}

func (o *DeleteCronJobBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteCronJobBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCronJobUnauthorized creates a DeleteCronJobUnauthorized with default headers values
func NewDeleteCronJobUnauthorized() *DeleteCronJobUnauthorized {
	return &DeleteCronJobUnauthorized{}
}

/* DeleteCronJobUnauthorized describes a response with status code 401, with default header values.

DeleteCronJobUnauthorized delete cron job unauthorized
*/
type DeleteCronJobUnauthorized struct {
	Payload interface{}
}

func (o *DeleteCronJobUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /cronjobs/{id}][%d] deleteCronJobUnauthorized  %+v", 401, o.Payload)
}
func (o *DeleteCronJobUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *DeleteCronJobUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCronJobForbidden creates a DeleteCronJobForbidden with default headers values
func NewDeleteCronJobForbidden() *DeleteCronJobForbidden {
	return &DeleteCronJobForbidden{}
}

/* DeleteCronJobForbidden describes a response with status code 403, with default header values.

DeleteCronJobForbidden delete cron job forbidden
*/
type DeleteCronJobForbidden struct {
	Payload *DeleteCronJobForbiddenBody
}

func (o *DeleteCronJobForbidden) Error() string {
	return fmt.Sprintf("[DELETE /cronjobs/{id}][%d] deleteCronJobForbidden  %+v", 403, o.Payload)
}
func (o *DeleteCronJobForbidden) GetPayload() *DeleteCronJobForbiddenBody {
	return o.Payload
}

func (o *DeleteCronJobForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteCronJobForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCronJobNotFound creates a DeleteCronJobNotFound with default headers values
func NewDeleteCronJobNotFound() *DeleteCronJobNotFound {
	return &DeleteCronJobNotFound{}
}

/* DeleteCronJobNotFound describes a response with status code 404, with default header values.

DeleteCronJobNotFound delete cron job not found
*/
type DeleteCronJobNotFound struct {
	Payload *DeleteCronJobNotFoundBody
}

func (o *DeleteCronJobNotFound) Error() string {
	return fmt.Sprintf("[DELETE /cronjobs/{id}][%d] deleteCronJobNotFound  %+v", 404, o.Payload)
}
func (o *DeleteCronJobNotFound) GetPayload() *DeleteCronJobNotFoundBody {
	return o.Payload
}

func (o *DeleteCronJobNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteCronJobNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCronJobInternalServerError creates a DeleteCronJobInternalServerError with default headers values
func NewDeleteCronJobInternalServerError() *DeleteCronJobInternalServerError {
	return &DeleteCronJobInternalServerError{}
}

/* DeleteCronJobInternalServerError describes a response with status code 500, with default header values.

DeleteCronJobInternalServerError delete cron job internal server error
*/
type DeleteCronJobInternalServerError struct {
	Payload interface{}
}

func (o *DeleteCronJobInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /cronjobs/{id}][%d] deleteCronJobInternalServerError  %+v", 500, o.Payload)
}
func (o *DeleteCronJobInternalServerError) GetPayload() interface{} {
	return o.Payload
}

func (o *DeleteCronJobInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*DeleteCronJobBadRequestBody delete cron job bad request body
swagger:model DeleteCronJobBadRequestBody
*/
type DeleteCronJobBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this delete cron job bad request body
func (o *DeleteCronJobBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCronJobBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("deleteCronJobBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this delete cron job bad request body based on context it is used
func (o *DeleteCronJobBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteCronJobBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteCronJobBadRequestBody) UnmarshalBinary(b []byte) error {
	var res DeleteCronJobBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteCronJobForbiddenBody delete cron job forbidden body
swagger:model DeleteCronJobForbiddenBody
*/
type DeleteCronJobForbiddenBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this delete cron job forbidden body
func (o *DeleteCronJobForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCronJobForbiddenBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("deleteCronJobForbidden"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this delete cron job forbidden body based on context it is used
func (o *DeleteCronJobForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteCronJobForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteCronJobForbiddenBody) UnmarshalBinary(b []byte) error {
	var res DeleteCronJobForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteCronJobNotFoundBody delete cron job not found body
swagger:model DeleteCronJobNotFoundBody
*/
type DeleteCronJobNotFoundBody struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this delete cron job not found body
func (o *DeleteCronJobNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteCronJobNotFoundBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("deleteCronJobNotFound"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

func (o *DeleteCronJobNotFoundBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("deleteCronJobNotFound"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this delete cron job not found body based on context it is used
func (o *DeleteCronJobNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteCronJobNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteCronJobNotFoundBody) UnmarshalBinary(b []byte) error {
	var res DeleteCronJobNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
