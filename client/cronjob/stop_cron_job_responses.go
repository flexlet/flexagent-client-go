// Code generated by go-swagger; DO NOT EDIT.

package cronjob

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/flexlet/flexagent-client-go/models"
)

// StopCronJobReader is a Reader for the StopCronJob structure.
type StopCronJobReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StopCronJobReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStopCronJobOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStopCronJobBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewStopCronJobUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStopCronJobForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStopCronJobNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStopCronJobInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewStopCronJobOK creates a StopCronJobOK with default headers values
func NewStopCronJobOK() *StopCronJobOK {
	return &StopCronJobOK{}
}

/* StopCronJobOK describes a response with status code 200, with default header values.

Stop cronjob succeeded
*/
type StopCronJobOK struct {
	Payload *models.CronJob
}

func (o *StopCronJobOK) Error() string {
	return fmt.Sprintf("[POST /cronjobs/{id}/stop][%d] stopCronJobOK  %+v", 200, o.Payload)
}
func (o *StopCronJobOK) GetPayload() *models.CronJob {
	return o.Payload
}

func (o *StopCronJobOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CronJob)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopCronJobBadRequest creates a StopCronJobBadRequest with default headers values
func NewStopCronJobBadRequest() *StopCronJobBadRequest {
	return &StopCronJobBadRequest{}
}

/* StopCronJobBadRequest describes a response with status code 400, with default header values.

StopCronJobBadRequest stop cron job bad request
*/
type StopCronJobBadRequest struct {
	Payload *StopCronJobBadRequestBody
}

func (o *StopCronJobBadRequest) Error() string {
	return fmt.Sprintf("[POST /cronjobs/{id}/stop][%d] stopCronJobBadRequest  %+v", 400, o.Payload)
}
func (o *StopCronJobBadRequest) GetPayload() *StopCronJobBadRequestBody {
	return o.Payload
}

func (o *StopCronJobBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StopCronJobBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopCronJobUnauthorized creates a StopCronJobUnauthorized with default headers values
func NewStopCronJobUnauthorized() *StopCronJobUnauthorized {
	return &StopCronJobUnauthorized{}
}

/* StopCronJobUnauthorized describes a response with status code 401, with default header values.

StopCronJobUnauthorized stop cron job unauthorized
*/
type StopCronJobUnauthorized struct {
	Payload interface{}
}

func (o *StopCronJobUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cronjobs/{id}/stop][%d] stopCronJobUnauthorized  %+v", 401, o.Payload)
}
func (o *StopCronJobUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *StopCronJobUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopCronJobForbidden creates a StopCronJobForbidden with default headers values
func NewStopCronJobForbidden() *StopCronJobForbidden {
	return &StopCronJobForbidden{}
}

/* StopCronJobForbidden describes a response with status code 403, with default header values.

StopCronJobForbidden stop cron job forbidden
*/
type StopCronJobForbidden struct {
	Payload *StopCronJobForbiddenBody
}

func (o *StopCronJobForbidden) Error() string {
	return fmt.Sprintf("[POST /cronjobs/{id}/stop][%d] stopCronJobForbidden  %+v", 403, o.Payload)
}
func (o *StopCronJobForbidden) GetPayload() *StopCronJobForbiddenBody {
	return o.Payload
}

func (o *StopCronJobForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StopCronJobForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopCronJobNotFound creates a StopCronJobNotFound with default headers values
func NewStopCronJobNotFound() *StopCronJobNotFound {
	return &StopCronJobNotFound{}
}

/* StopCronJobNotFound describes a response with status code 404, with default header values.

StopCronJobNotFound stop cron job not found
*/
type StopCronJobNotFound struct {
	Payload *StopCronJobNotFoundBody
}

func (o *StopCronJobNotFound) Error() string {
	return fmt.Sprintf("[POST /cronjobs/{id}/stop][%d] stopCronJobNotFound  %+v", 404, o.Payload)
}
func (o *StopCronJobNotFound) GetPayload() *StopCronJobNotFoundBody {
	return o.Payload
}

func (o *StopCronJobNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StopCronJobNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopCronJobInternalServerError creates a StopCronJobInternalServerError with default headers values
func NewStopCronJobInternalServerError() *StopCronJobInternalServerError {
	return &StopCronJobInternalServerError{}
}

/* StopCronJobInternalServerError describes a response with status code 500, with default header values.

StopCronJobInternalServerError stop cron job internal server error
*/
type StopCronJobInternalServerError struct {
	Payload interface{}
}

func (o *StopCronJobInternalServerError) Error() string {
	return fmt.Sprintf("[POST /cronjobs/{id}/stop][%d] stopCronJobInternalServerError  %+v", 500, o.Payload)
}
func (o *StopCronJobInternalServerError) GetPayload() interface{} {
	return o.Payload
}

func (o *StopCronJobInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*StopCronJobBadRequestBody stop cron job bad request body
swagger:model StopCronJobBadRequestBody
*/
type StopCronJobBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this stop cron job bad request body
func (o *StopCronJobBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StopCronJobBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("stopCronJobBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this stop cron job bad request body based on context it is used
func (o *StopCronJobBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StopCronJobBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StopCronJobBadRequestBody) UnmarshalBinary(b []byte) error {
	var res StopCronJobBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StopCronJobForbiddenBody stop cron job forbidden body
swagger:model StopCronJobForbiddenBody
*/
type StopCronJobForbiddenBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this stop cron job forbidden body
func (o *StopCronJobForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StopCronJobForbiddenBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("stopCronJobForbidden"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this stop cron job forbidden body based on context it is used
func (o *StopCronJobForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StopCronJobForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StopCronJobForbiddenBody) UnmarshalBinary(b []byte) error {
	var res StopCronJobForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StopCronJobNotFoundBody stop cron job not found body
swagger:model StopCronJobNotFoundBody
*/
type StopCronJobNotFoundBody struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this stop cron job not found body
func (o *StopCronJobNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StopCronJobNotFoundBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("stopCronJobNotFound"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

func (o *StopCronJobNotFoundBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("stopCronJobNotFound"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this stop cron job not found body based on context it is used
func (o *StopCronJobNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StopCronJobNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StopCronJobNotFoundBody) UnmarshalBinary(b []byte) error {
	var res StopCronJobNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
