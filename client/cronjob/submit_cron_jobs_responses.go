// Code generated by go-swagger; DO NOT EDIT.

package cronjob

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/flexlet/flexagent-client-go/models"
)

// SubmitCronJobsReader is a Reader for the SubmitCronJobs structure.
type SubmitCronJobsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SubmitCronJobsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSubmitCronJobsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSubmitCronJobsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSubmitCronJobsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSubmitCronJobsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSubmitCronJobsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSubmitCronJobsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSubmitCronJobsOK creates a SubmitCronJobsOK with default headers values
func NewSubmitCronJobsOK() *SubmitCronJobsOK {
	return &SubmitCronJobsOK{}
}

/* SubmitCronJobsOK describes a response with status code 200, with default header values.

Submit cronjob succeeded
*/
type SubmitCronJobsOK struct {
	Payload []*models.CronJob
}

func (o *SubmitCronJobsOK) Error() string {
	return fmt.Sprintf("[POST /cronjobs][%d] submitCronJobsOK  %+v", 200, o.Payload)
}
func (o *SubmitCronJobsOK) GetPayload() []*models.CronJob {
	return o.Payload
}

func (o *SubmitCronJobsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitCronJobsBadRequest creates a SubmitCronJobsBadRequest with default headers values
func NewSubmitCronJobsBadRequest() *SubmitCronJobsBadRequest {
	return &SubmitCronJobsBadRequest{}
}

/* SubmitCronJobsBadRequest describes a response with status code 400, with default header values.

SubmitCronJobsBadRequest submit cron jobs bad request
*/
type SubmitCronJobsBadRequest struct {
	Payload *SubmitCronJobsBadRequestBody
}

func (o *SubmitCronJobsBadRequest) Error() string {
	return fmt.Sprintf("[POST /cronjobs][%d] submitCronJobsBadRequest  %+v", 400, o.Payload)
}
func (o *SubmitCronJobsBadRequest) GetPayload() *SubmitCronJobsBadRequestBody {
	return o.Payload
}

func (o *SubmitCronJobsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SubmitCronJobsBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitCronJobsUnauthorized creates a SubmitCronJobsUnauthorized with default headers values
func NewSubmitCronJobsUnauthorized() *SubmitCronJobsUnauthorized {
	return &SubmitCronJobsUnauthorized{}
}

/* SubmitCronJobsUnauthorized describes a response with status code 401, with default header values.

SubmitCronJobsUnauthorized submit cron jobs unauthorized
*/
type SubmitCronJobsUnauthorized struct {
	Payload interface{}
}

func (o *SubmitCronJobsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cronjobs][%d] submitCronJobsUnauthorized  %+v", 401, o.Payload)
}
func (o *SubmitCronJobsUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *SubmitCronJobsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitCronJobsForbidden creates a SubmitCronJobsForbidden with default headers values
func NewSubmitCronJobsForbidden() *SubmitCronJobsForbidden {
	return &SubmitCronJobsForbidden{}
}

/* SubmitCronJobsForbidden describes a response with status code 403, with default header values.

SubmitCronJobsForbidden submit cron jobs forbidden
*/
type SubmitCronJobsForbidden struct {
	Payload *SubmitCronJobsForbiddenBody
}

func (o *SubmitCronJobsForbidden) Error() string {
	return fmt.Sprintf("[POST /cronjobs][%d] submitCronJobsForbidden  %+v", 403, o.Payload)
}
func (o *SubmitCronJobsForbidden) GetPayload() *SubmitCronJobsForbiddenBody {
	return o.Payload
}

func (o *SubmitCronJobsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SubmitCronJobsForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitCronJobsNotFound creates a SubmitCronJobsNotFound with default headers values
func NewSubmitCronJobsNotFound() *SubmitCronJobsNotFound {
	return &SubmitCronJobsNotFound{}
}

/* SubmitCronJobsNotFound describes a response with status code 404, with default header values.

SubmitCronJobsNotFound submit cron jobs not found
*/
type SubmitCronJobsNotFound struct {
	Payload *SubmitCronJobsNotFoundBody
}

func (o *SubmitCronJobsNotFound) Error() string {
	return fmt.Sprintf("[POST /cronjobs][%d] submitCronJobsNotFound  %+v", 404, o.Payload)
}
func (o *SubmitCronJobsNotFound) GetPayload() *SubmitCronJobsNotFoundBody {
	return o.Payload
}

func (o *SubmitCronJobsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SubmitCronJobsNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitCronJobsInternalServerError creates a SubmitCronJobsInternalServerError with default headers values
func NewSubmitCronJobsInternalServerError() *SubmitCronJobsInternalServerError {
	return &SubmitCronJobsInternalServerError{}
}

/* SubmitCronJobsInternalServerError describes a response with status code 500, with default header values.

SubmitCronJobsInternalServerError submit cron jobs internal server error
*/
type SubmitCronJobsInternalServerError struct {
	Payload interface{}
}

func (o *SubmitCronJobsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /cronjobs][%d] submitCronJobsInternalServerError  %+v", 500, o.Payload)
}
func (o *SubmitCronJobsInternalServerError) GetPayload() interface{} {
	return o.Payload
}

func (o *SubmitCronJobsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*SubmitCronJobsBadRequestBody submit cron jobs bad request body
swagger:model SubmitCronJobsBadRequestBody
*/
type SubmitCronJobsBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this submit cron jobs bad request body
func (o *SubmitCronJobsBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SubmitCronJobsBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("submitCronJobsBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this submit cron jobs bad request body based on context it is used
func (o *SubmitCronJobsBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SubmitCronJobsBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SubmitCronJobsBadRequestBody) UnmarshalBinary(b []byte) error {
	var res SubmitCronJobsBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SubmitCronJobsForbiddenBody submit cron jobs forbidden body
swagger:model SubmitCronJobsForbiddenBody
*/
type SubmitCronJobsForbiddenBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this submit cron jobs forbidden body
func (o *SubmitCronJobsForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SubmitCronJobsForbiddenBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("submitCronJobsForbidden"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this submit cron jobs forbidden body based on context it is used
func (o *SubmitCronJobsForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SubmitCronJobsForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SubmitCronJobsForbiddenBody) UnmarshalBinary(b []byte) error {
	var res SubmitCronJobsForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SubmitCronJobsNotFoundBody submit cron jobs not found body
swagger:model SubmitCronJobsNotFoundBody
*/
type SubmitCronJobsNotFoundBody struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this submit cron jobs not found body
func (o *SubmitCronJobsNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SubmitCronJobsNotFoundBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("submitCronJobsNotFound"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

func (o *SubmitCronJobsNotFoundBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("submitCronJobsNotFound"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this submit cron jobs not found body based on context it is used
func (o *SubmitCronJobsNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SubmitCronJobsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SubmitCronJobsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res SubmitCronJobsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
