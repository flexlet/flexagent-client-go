// Code generated by go-swagger; DO NOT EDIT.

package cronjob

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new cronjob API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cronjob API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteCronJob(params *DeleteCronJobParams, opts ...ClientOption) (*DeleteCronJobOK, error)

	ListCronJobs(params *ListCronJobsParams, opts ...ClientOption) (*ListCronJobsOK, error)

	QueryCronJob(params *QueryCronJobParams, opts ...ClientOption) (*QueryCronJobOK, error)

	StartCronJob(params *StartCronJobParams, opts ...ClientOption) (*StartCronJobOK, error)

	StopCronJob(params *StopCronJobParams, opts ...ClientOption) (*StopCronJobOK, error)

	SubmitCronJobs(params *SubmitCronJobsParams, opts ...ClientOption) (*SubmitCronJobsOK, error)

	UpdateCronJob(params *UpdateCronJobParams, opts ...ClientOption) (*UpdateCronJobOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteCronJob Delete cronjob
*/
func (a *Client) DeleteCronJob(params *DeleteCronJobParams, opts ...ClientOption) (*DeleteCronJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCronJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteCronJob",
		Method:             "DELETE",
		PathPattern:        "/cronjobs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteCronJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCronJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCronJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCronJobs List cronjobs
*/
func (a *Client) ListCronJobs(params *ListCronJobsParams, opts ...ClientOption) (*ListCronJobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCronJobsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listCronJobs",
		Method:             "GET",
		PathPattern:        "/cronjobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListCronJobsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCronJobsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCronJobs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueryCronJob Query cronjob
*/
func (a *Client) QueryCronJob(params *QueryCronJobParams, opts ...ClientOption) (*QueryCronJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryCronJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "queryCronJob",
		Method:             "GET",
		PathPattern:        "/cronjobs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &QueryCronJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryCronJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for queryCronJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartCronJob Start cronjob
*/
func (a *Client) StartCronJob(params *StartCronJobParams, opts ...ClientOption) (*StartCronJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartCronJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "startCronJob",
		Method:             "POST",
		PathPattern:        "/cronjobs/{id}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StartCronJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartCronJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for startCronJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StopCronJob Stop cronjob
*/
func (a *Client) StopCronJob(params *StopCronJobParams, opts ...ClientOption) (*StopCronJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopCronJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stopCronJob",
		Method:             "POST",
		PathPattern:        "/cronjobs/{id}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StopCronJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopCronJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stopCronJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SubmitCronJobs Submit cronjobs
*/
func (a *Client) SubmitCronJobs(params *SubmitCronJobsParams, opts ...ClientOption) (*SubmitCronJobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubmitCronJobsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "submitCronJobs",
		Method:             "POST",
		PathPattern:        "/cronjobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubmitCronJobsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubmitCronJobsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for submitCronJobs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCronJob Update cronjob
*/
func (a *Client) UpdateCronJob(params *UpdateCronJobParams, opts ...ClientOption) (*UpdateCronJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCronJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateCronJob",
		Method:             "PUT",
		PathPattern:        "/cronjobs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateCronJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCronJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCronJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
