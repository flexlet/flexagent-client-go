// Code generated by go-swagger; DO NOT EDIT.

package cronjob

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/flexlet/flexagent-client-go/models"
)

// UpdateCronJobReader is a Reader for the UpdateCronJob structure.
type UpdateCronJobReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCronJobReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateCronJobOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateCronJobBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateCronJobUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateCronJobForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateCronJobNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateCronJobInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateCronJobOK creates a UpdateCronJobOK with default headers values
func NewUpdateCronJobOK() *UpdateCronJobOK {
	return &UpdateCronJobOK{}
}

/* UpdateCronJobOK describes a response with status code 200, with default header values.

Update cronjob succeeded
*/
type UpdateCronJobOK struct {
	Payload *models.CronJob
}

func (o *UpdateCronJobOK) Error() string {
	return fmt.Sprintf("[PUT /cronjobs/{id}][%d] updateCronJobOK  %+v", 200, o.Payload)
}
func (o *UpdateCronJobOK) GetPayload() *models.CronJob {
	return o.Payload
}

func (o *UpdateCronJobOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CronJob)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCronJobBadRequest creates a UpdateCronJobBadRequest with default headers values
func NewUpdateCronJobBadRequest() *UpdateCronJobBadRequest {
	return &UpdateCronJobBadRequest{}
}

/* UpdateCronJobBadRequest describes a response with status code 400, with default header values.

UpdateCronJobBadRequest update cron job bad request
*/
type UpdateCronJobBadRequest struct {
	Payload *UpdateCronJobBadRequestBody
}

func (o *UpdateCronJobBadRequest) Error() string {
	return fmt.Sprintf("[PUT /cronjobs/{id}][%d] updateCronJobBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateCronJobBadRequest) GetPayload() *UpdateCronJobBadRequestBody {
	return o.Payload
}

func (o *UpdateCronJobBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateCronJobBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCronJobUnauthorized creates a UpdateCronJobUnauthorized with default headers values
func NewUpdateCronJobUnauthorized() *UpdateCronJobUnauthorized {
	return &UpdateCronJobUnauthorized{}
}

/* UpdateCronJobUnauthorized describes a response with status code 401, with default header values.

UpdateCronJobUnauthorized update cron job unauthorized
*/
type UpdateCronJobUnauthorized struct {
	Payload interface{}
}

func (o *UpdateCronJobUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /cronjobs/{id}][%d] updateCronJobUnauthorized  %+v", 401, o.Payload)
}
func (o *UpdateCronJobUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateCronJobUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCronJobForbidden creates a UpdateCronJobForbidden with default headers values
func NewUpdateCronJobForbidden() *UpdateCronJobForbidden {
	return &UpdateCronJobForbidden{}
}

/* UpdateCronJobForbidden describes a response with status code 403, with default header values.

UpdateCronJobForbidden update cron job forbidden
*/
type UpdateCronJobForbidden struct {
	Payload *UpdateCronJobForbiddenBody
}

func (o *UpdateCronJobForbidden) Error() string {
	return fmt.Sprintf("[PUT /cronjobs/{id}][%d] updateCronJobForbidden  %+v", 403, o.Payload)
}
func (o *UpdateCronJobForbidden) GetPayload() *UpdateCronJobForbiddenBody {
	return o.Payload
}

func (o *UpdateCronJobForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateCronJobForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCronJobNotFound creates a UpdateCronJobNotFound with default headers values
func NewUpdateCronJobNotFound() *UpdateCronJobNotFound {
	return &UpdateCronJobNotFound{}
}

/* UpdateCronJobNotFound describes a response with status code 404, with default header values.

UpdateCronJobNotFound update cron job not found
*/
type UpdateCronJobNotFound struct {
	Payload *UpdateCronJobNotFoundBody
}

func (o *UpdateCronJobNotFound) Error() string {
	return fmt.Sprintf("[PUT /cronjobs/{id}][%d] updateCronJobNotFound  %+v", 404, o.Payload)
}
func (o *UpdateCronJobNotFound) GetPayload() *UpdateCronJobNotFoundBody {
	return o.Payload
}

func (o *UpdateCronJobNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateCronJobNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCronJobInternalServerError creates a UpdateCronJobInternalServerError with default headers values
func NewUpdateCronJobInternalServerError() *UpdateCronJobInternalServerError {
	return &UpdateCronJobInternalServerError{}
}

/* UpdateCronJobInternalServerError describes a response with status code 500, with default header values.

UpdateCronJobInternalServerError update cron job internal server error
*/
type UpdateCronJobInternalServerError struct {
	Payload interface{}
}

func (o *UpdateCronJobInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /cronjobs/{id}][%d] updateCronJobInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateCronJobInternalServerError) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateCronJobInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateCronJobBadRequestBody update cron job bad request body
swagger:model UpdateCronJobBadRequestBody
*/
type UpdateCronJobBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this update cron job bad request body
func (o *UpdateCronJobBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateCronJobBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("updateCronJobBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update cron job bad request body based on context it is used
func (o *UpdateCronJobBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateCronJobBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateCronJobBadRequestBody) UnmarshalBinary(b []byte) error {
	var res UpdateCronJobBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateCronJobForbiddenBody update cron job forbidden body
swagger:model UpdateCronJobForbiddenBody
*/
type UpdateCronJobForbiddenBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this update cron job forbidden body
func (o *UpdateCronJobForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateCronJobForbiddenBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("updateCronJobForbidden"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update cron job forbidden body based on context it is used
func (o *UpdateCronJobForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateCronJobForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateCronJobForbiddenBody) UnmarshalBinary(b []byte) error {
	var res UpdateCronJobForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateCronJobNotFoundBody update cron job not found body
swagger:model UpdateCronJobNotFoundBody
*/
type UpdateCronJobNotFoundBody struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this update cron job not found body
func (o *UpdateCronJobNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateCronJobNotFoundBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("updateCronJobNotFound"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

func (o *UpdateCronJobNotFoundBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("updateCronJobNotFound"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update cron job not found body based on context it is used
func (o *UpdateCronJobNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateCronJobNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateCronJobNotFoundBody) UnmarshalBinary(b []byte) error {
	var res UpdateCronJobNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
