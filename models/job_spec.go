// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JobSpec Job spec
//
// swagger:model JobSpec
type JobSpec struct {

	// Arguments
	Args []string `json:"args"`

	// Enviorment variables, key=value array
	Env []string `json:"env"`

	// Operation
	// Required: true
	// Pattern: ^[A-Za-z0-9\-_.]{1,32}$
	Operation string `json:"operation"`

	// Plugin
	// Required: true
	// Pattern: ^[A-Za-z0-9\-_.]{1,32}$
	Plugin string `json:"plugin"`
}

// Validate validates this job spec
func (m *JobSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlugin(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobSpec) validateOperation(formats strfmt.Registry) error {

	if err := validate.RequiredString("operation", "body", m.Operation); err != nil {
		return err
	}

	if err := validate.Pattern("operation", "body", m.Operation, `^[A-Za-z0-9\-_.]{1,32}$`); err != nil {
		return err
	}

	return nil
}

func (m *JobSpec) validatePlugin(formats strfmt.Registry) error {

	if err := validate.RequiredString("plugin", "body", m.Plugin); err != nil {
		return err
	}

	if err := validate.Pattern("plugin", "body", m.Plugin, `^[A-Za-z0-9\-_.]{1,32}$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this job spec based on context it is used
func (m *JobSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *JobSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobSpec) UnmarshalBinary(b []byte) error {
	var res JobSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
