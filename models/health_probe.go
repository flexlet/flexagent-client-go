// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HealthProbe Node healthy probes
//
// swagger:model HealthProbe
type HealthProbe struct {

	// Probe item message
	Message *string `json:"message,omitempty"`

	// Probe item name
	// Required: true
	Name string `json:"name"`

	// Probe item status
	// Required: true
	// Enum: [unknown healthy warning critical]
	Status string `json:"status"`
}

// Validate validates this health probe
func (m *HealthProbe) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HealthProbe) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var healthProbeTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","healthy","warning","critical"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		healthProbeTypeStatusPropEnum = append(healthProbeTypeStatusPropEnum, v)
	}
}

const (

	// HealthProbeStatusUnknown captures enum value "unknown"
	HealthProbeStatusUnknown string = "unknown"

	// HealthProbeStatusHealthy captures enum value "healthy"
	HealthProbeStatusHealthy string = "healthy"

	// HealthProbeStatusWarning captures enum value "warning"
	HealthProbeStatusWarning string = "warning"

	// HealthProbeStatusCritical captures enum value "critical"
	HealthProbeStatusCritical string = "critical"
)

// prop value enum
func (m *HealthProbe) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, healthProbeTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HealthProbe) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this health probe based on context it is used
func (m *HealthProbe) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HealthProbe) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HealthProbe) UnmarshalBinary(b []byte) error {
	var res HealthProbe
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
