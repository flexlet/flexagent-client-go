// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JobStatus Job status
//
// swagger:model JobStatus
type JobStatus struct {

	// Exit code
	ExitCode *int32 `json:"exitCode,omitempty"`

	// Job output
	Output *JobOutput `json:"output,omitempty"`

	// Job state
	// Required: true
	// Enum: [waiting running exited killed failed_start]
	State string `json:"state"`
}

// Validate validates this job status
func (m *JobStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOutput(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobStatus) validateOutput(formats strfmt.Registry) error {
	if swag.IsZero(m.Output) { // not required
		return nil
	}

	if m.Output != nil {
		if err := m.Output.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("output")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("output")
			}
			return err
		}
	}

	return nil
}

var jobStatusTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["waiting","running","exited","killed","failed_start"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jobStatusTypeStatePropEnum = append(jobStatusTypeStatePropEnum, v)
	}
}

const (

	// JobStatusStateWaiting captures enum value "waiting"
	JobStatusStateWaiting string = "waiting"

	// JobStatusStateRunning captures enum value "running"
	JobStatusStateRunning string = "running"

	// JobStatusStateExited captures enum value "exited"
	JobStatusStateExited string = "exited"

	// JobStatusStateKilled captures enum value "killed"
	JobStatusStateKilled string = "killed"

	// JobStatusStateFailedStart captures enum value "failed_start"
	JobStatusStateFailedStart string = "failed_start"
)

// prop value enum
func (m *JobStatus) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, jobStatusTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *JobStatus) validateState(formats strfmt.Registry) error {

	if err := validate.RequiredString("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this job status based on the context it is used
func (m *JobStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOutput(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobStatus) contextValidateOutput(ctx context.Context, formats strfmt.Registry) error {

	if m.Output != nil {
		if err := m.Output.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("output")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("output")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JobStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobStatus) UnmarshalBinary(b []byte) error {
	var res JobStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
