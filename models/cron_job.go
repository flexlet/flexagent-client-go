// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CronJob Cronjob
//
// swagger:model CronJob
type CronJob struct {

	// Cronjob id
	// Pattern: ^[A-Za-z0-9\-]{36}$
	ID string `json:"id,omitempty"`

	// History jobs
	// Required: true
	Jobs []string `json:"jobs"`

	// Cronjob spec
	// Required: true
	Spec *CronJobSpec `json:"spec"`

	// status
	// Enum: [running stoped]
	Status string `json:"status,omitempty"`
}

// Validate validates this cron job
func (m *CronJob) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CronJob) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.Pattern("id", "body", m.ID, `^[A-Za-z0-9\-]{36}$`); err != nil {
		return err
	}

	return nil
}

func (m *CronJob) validateJobs(formats strfmt.Registry) error {

	if err := validate.Required("jobs", "body", m.Jobs); err != nil {
		return err
	}

	return nil
}

func (m *CronJob) validateSpec(formats strfmt.Registry) error {

	if err := validate.Required("spec", "body", m.Spec); err != nil {
		return err
	}

	if m.Spec != nil {
		if err := m.Spec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("spec")
			}
			return err
		}
	}

	return nil
}

var cronJobTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["running","stoped"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cronJobTypeStatusPropEnum = append(cronJobTypeStatusPropEnum, v)
	}
}

const (

	// CronJobStatusRunning captures enum value "running"
	CronJobStatusRunning string = "running"

	// CronJobStatusStoped captures enum value "stoped"
	CronJobStatusStoped string = "stoped"
)

// prop value enum
func (m *CronJob) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cronJobTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CronJob) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this cron job based on the context it is used
func (m *CronJob) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CronJob) contextValidateSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.Spec != nil {
		if err := m.Spec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("spec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CronJob) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CronJob) UnmarshalBinary(b []byte) error {
	var res CronJob
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
